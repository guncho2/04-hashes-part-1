
Explain why doubling the size of the underlying array of your HashClass may be a poor idea.
Hints:

Doubling the size of the area increased the number of open slots in the array 
for potential values which may lead to more fragmentation.

Doubling the size of an array (allocating memory) is a slow operation.

Prefering to use prime numbers which have less possible collitions.
Double the size is an easy way to code and buildanothers memory positions, however it open also more possible fragmentations
at the time the key.sum % size will resolve the hash and then get the value and resolve the position.












HASH


 size = 32
 key.sum % size 
true_index = key.sum % size
 self.items = Array.new(size)
 self.items[true_index] = value
 ====
 def initialize(size) 
self.size = 32
 self.items = Array.new(size) 
end 

 "1942".sum
 2857274810 % 5 

 Assume “1944” generates a hash code of 3759193923. Modding this code by k (5), if there is a collision example 5 go to 10 double 

 2857274820 % 5
 index = key.sum % k
 if(self.items[index] !== nil) 
==== 
def resize 
holder = self.items.compact
 self.items = Array.new(self.size * 2)
 hold.items.each { |item| self[item.key] = item.value }